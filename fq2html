#! /usr/bin/python3
# fq2html
# Copyright (C) 2022 Red Hat, Inc.
#
# Authors:
#   Akira TAGOH  <tagoh@redhat.com>
#
# Permission is hereby granted, without written agreement and without
# license or royalty fees, to use, copy, modify, and distribute this
# software and its documentation for any purpose, provided that the
# above copyright notice and the following two paragraphs appear in
# all copies of this software.
#
# IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE TO ANY PARTY FOR
# DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
# ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN
# IF THE COPYRIGHT HOLDER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
# DAMAGE.
#
# THE COPYRIGHT HOLDER SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING,
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
# ON AN "AS IS" BASIS, AND THE COPYRIGHT HOLDER HAS NO OBLIGATION TO
# PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.

import argparse
import atexit
import json
import markdown
import os
import re
import sys

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='HTML formatter for fontquery',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('-o', '--output',
                        type=argparse.FileType('w'),
                        default='-',
                        help='Output file')
    parser.add_argument('-t', '--title',
                        help='Set title name')
    parser.add_argument('FILE',
                        type=argparse.FileType('r'),
                        help='JSON file to read or - to read from stdin')

    args = parser.parse_args()
    atexit.register(args.FILE.close)

    data = None
    with args.FILE:
        data = json.load(args.FILE)

    md = [
        'Language | default sans | default serif | default mono',
        '-------- | ------------ | ------------- | ------------',
    ]
    sorteddata = {}
    for d in data['fonts']:
        key = d['lang_name']
        if not key in sorteddata:
            sorteddata[key] = {}
        alias = d['alias']
        if not alias in sorteddata[key]:
            sorteddata[key][alias] = {}
        sorteddata[key][alias] = d

    for k in sorted(sorteddata.keys()):
        aliases = {
            'sans-serif': 'sans',
            'serif': 'serif',
            'monospace': 'mono'
        }
        s = '{}({}) '.format(k, sorteddata[k]['sans-serif']['lang'])
        for kk, vv in aliases.items():
            if re.search(r'(?i:{})'.format(vv), sorteddata[k][kk]['family']):
                attr = '.match'
            else:
                attr = '.notmatch'
            s += '| {} {{ {} }}'.format(sorteddata[k][kk]['family'], attr)

        md.append(s)

    with args.output:
        header = [
            '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',
            '<html>',
            '<head><title>Fonts table for %(title)s</title><style type=\"text/css\">',
            'table {',
            '  border-collapse: collapse;',
            '}',
            'table, th, td {',
            '  border-style: solid;',
            '  border-width: 1px;',
            '  border-color: #000000;',
            '}',
            '.match {',
            '}',
            '.notmatch {',
            '  color: orange',
            '}',
            '</style></head>',
            '<body>',
            '<div name="note" style="font-size: 10px; color: gray;">Note: orange colored name means needing some attention because there are no clue in family name if a font is certainly assigned to proper generic alias</div>',
        ]
        match data['pattern']:
          case 'comps':
            header.append('<div name="note" style="font-size: 10px; color: gray;">This table was generated according to the result on environment where all the packages in fonts group has been installed.</div>')
          case 'langpacks':
            header.append('<div name="note" style="font-size: 10px; color: gray;">This table was generated according to the result on environment where all the langpacks packages has been installed.</div>')
          case 'both':
            header.append('<div name="note" style="font-size: 10px; color: gray;">This table was generated according to the result on environment where all the packages in fonts group and all the langpacks packages has been installed.</div>')
          case 'all':
            header.append('<div name="note" style="font-size: 10px; color: gray;">This table was generated according to the result on environment where all the *-fonts packages has been installed with --skip-broken to dnf.</div>')

        footer = [
            '</table>',
            '<div name=\"footer\" style=\"text-align:right;float:right;font-size:10px;color:gray;\">Generated by fontquery(%(image)s image) + %(progname)s</div>',
            '</body>',
            '</html>'
        ]
        args.output.write('\n'.join(header) % {'title': args.title})
        args.output.write(markdown.markdown('\n'.join(md), extensions=['tables', 'attr_list']))
        args.output.write('\n'.join(footer) % {'progname': os.path.basename(__file__),
                                               'image': data['pattern']})
